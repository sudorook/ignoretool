#! /bin/bash
set -Eeuo pipefail

#
# Globals
#

ROOT="$(dirname "$(dirname "$(readlink -f "${0}")")")"

source "${ROOT}/globals"

! check_command find git sed && exit 3

DIRS=(gitignore)
TMP="$(mktemp)"
trap 'rm -f "${TMP}"; exit' INT TERM ERR EXIT

#
# Functions
#

function list_gitignores() {
  local dir
  local key
  local file
  local remote
  local url
  local branch
  local host
  local acct
  local repo
  local filepath
  for dir in "${DIRS[@]}"; do
    if [ -d "${dir}" ]; then
      while read -r file; do
        key="$(echo "${file,,}" |
               sed -e "s,${dir}/,,g" |
               sed -e "s,^\./,,g" -e "s,community/,,g" -e "s,global/,,g" -e "s,/,_,g" |
               sed -n "s,\(.*\).gitignore,\1,p")"
        branch="$(git -C "$(dirname "${file}")" rev-parse --abbrev-ref HEAD)"
        remote="$(git -C "$(dirname "${file}")" remote get-url --all origin)"
        repo="$(basename "${remote}" | sed -e "s/\.git$//g")"
        host="$(dirname "${remote}")"
        acct="$(basename "${host}")"
        host="$(dirname "${host}")"
        filepath="${file//${dir}\//}"
        filepath="${filepath//\.\//}"
        case "${host}" in
          https://github.com | github.com)
            host="https://raw.githubusercontent.com"
            url="${host}/${acct}/${repo}/${branch}/${filepath}"
            ;;
          https://gitlab.com | gitlab.com)
            host="https://gitlab.com"
            url="${host}/${acct}/${repo}/-/raw/${branch}/${filepath}"
            ;;
          https://codeberg.org | codeberg.org)
            host="https://codeberg.org"
            url="${host}/${acct}/${repo}/raw/branch/${branch}/${filepath}"
            ;;
          *)
            show_error "WARNING: ${file@Q} unsupported. Skipping." >&2
            continue
            ;;
        esac
        cat << EOF
FILE[${key@Q}]=${file@Q}
URL[${key@Q}]=${url@Q}

EOF
      done <<< "$(find "./${dir}" -type f -name "*.gitignore" | sort -d -f)"
    else
      show_warning "WARNING: ${dir@Q} not found. Skipping." >&2
      continue
    fi
  done
}

function print_header() {
  cat << EOF
#! /bin/bash

################################################################################
# IMPORTANT: Entries below are auto-generated. Do not edit manually.
################################################################################

declare -A FILE
declare -A URL

EOF
}

function print_footer() {
  cat << EOF
export FILE
export URL
EOF
}

#
# Main
#

pushd "${ROOT}" > /dev/null

git submodule update --init --recursive --remote

show_header "Rebuilding ${ROOT}/data..."
{
  print_header
  list_gitignores
  print_footer
} > "${TMP}"

if [ -n "${TMP}" ]; then
  cp -vf "${TMP}" "${ROOT}"/data
  show_success "Done"
else
  show_error "ERROR: output ${TMP} is empty. Exiting."
  exit 3
fi
